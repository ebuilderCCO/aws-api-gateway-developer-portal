swagger: "2.0"
info:
  description:
    Commerce service provides information about current mobile operator deals
  version: "1.0.0"
  title: "CommerceService"
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
schemes:
- "https"
paths:
  /v1/campaigns:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "conditions"
        in: "query"
        required: false
        type: "string"
      - name: "model"
        in: "query"
        required: true
        type: "string"
      - name: "x-guid"
        in: "header"
        required: true
        type: "string"
      - name: "serviceType"
        in: "query"
        required: false
        type: "string"
      - name: "brand"
        in: "query"
        required: true
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Deal"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ErrorMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          4\d{2}:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,x-request-token,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,x-request-token,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.serviceType: "method.request.querystring.serviceType"
          integration.request.querystring.model: "method.request.querystring.model"
          integration.request.querystring.language: "method.request.querystring.language"
          integration.request.querystring.brand: "method.request.querystring.brand"
          integration.request.querystring.conditions: "method.request.querystring.conditions"
          integration.request.header.x-guid: "method.request.header.x-guid"
        uri: "http://@env: COMMERCE_BEANSTALK_HOST@/v1/campaigns"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "conditions"
        in: "query"
        required: false
        type: "string"
      - name: "model"
        in: "query"
        required: true
        type: "string"
      - name: "x-guid"
        in: "header"
        required: true
        type: "string"
      - name: "serviceType"
        in: "query"
        required: false
        type: "string"
      - name: "brand"
        in: "query"
        required: true
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Deal"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ErrorMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,Authorization,x-api-key,x-request-token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /v1/campaigns/{campaign_type}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "conditions"
        in: "query"
        required: false
        type: "string"
      - name: "model"
        in: "query"
        required: true
        type: "string"
      - name: "x-guid"
        in: "header"
        required: true
        type: "string"
      - name: "brand"
        in: "query"
        required: true
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      - name: "serviceType"
        in: "query"
        required: false
        type: "string"
      - name: "campaign_type"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Deal"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ErrorMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          4\d{2}:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,x-request-token,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,x-request-token,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.serviceType: "method.request.querystring.serviceType"
          integration.request.querystring.model: "method.request.querystring.model"
          integration.request.path.campaign_type: "method.request.path.campaign_type"
          integration.request.querystring.language: "method.request.querystring.language"
          integration.request.querystring.brand: "method.request.querystring.brand"
          integration.request.querystring.conditions: "method.request.querystring.conditions"
          integration.request.header.x-guid: "method.request.header.x-guid"
        uri: "http://@env: COMMERCE_BEANSTALK_HOST@/v1/campaigns/{campaign_type}"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "conditions"
        in: "query"
        required: false
        type: "string"
      - name: "model"
        in: "query"
        required: true
        type: "string"
      - name: "x-guid"
        in: "header"
        required: true
        type: "string"
      - name: "brand"
        in: "query"
        required: true
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      - name: "serviceType"
        in: "query"
        required: false
        type: "string"
      - name: "campaign_type"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Deal"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ErrorMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,Authorization,x-api-key,x-request-token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /v1/repair/options:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "lng"
        in: "query"
        required: true
        type: "string"
      - name: "model"
        in: "query"
        required: true
        type: "string"
      - name: "x-guid"
        in: "header"
        required: true
        type: "string"
      - name: "lat"
        in: "query"
        required: true
        type: "string"
      - name: "brand"
        in: "query"
        required: true
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      - name: "serviceType"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Deal"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ErrorMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          4\d{2}:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,x-request-token,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,x-request-token,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.lat: "method.request.querystring.lat"
          integration.request.querystring.model: "method.request.querystring.model"
          integration.request.querystring.lng: "method.request.querystring.lng"
          integration.request.querystring.language: "method.request.querystring.language"
          integration.request.querystring.brand: "method.request.querystring.brand"
          integration.request.header.x-guid: "method.request.header.x-guid"
        uri: "http://@env: COMMERCE_BEANSTALK_HOST@/v1/repair/options"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "lng"
        in: "query"
        required: true
        type: "string"
      - name: "model"
        in: "query"
        required: true
        type: "string"
      - name: "x-guid"
        in: "header"
        required: true
        type: "string"
      - name: "lat"
        in: "query"
        required: true
        type: "string"
      - name: "brand"
        in: "query"
        required: true
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Deal"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ErrorMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-request-token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /v1/repair/options/{provider_type}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "provider_type"
        in: "path"
        required: true
        type: "string"
      - name: "model"
        in: "query"
        required: true
        type: "string"
      - name: "timeout"
        in: "query"
        required: false
        type: "string"
      - name: "x-guid"
        in: "header"
        required: true
        type: "string"
      - name: "lat"
        in: "query"
        required: true
        type: "string"
      - name: "brand"
        in: "query"
        required: true
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      - name: "lng"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/RepairCenterProjection"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ErrorMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          4\d{2}:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,x-request-token,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,x-request-token,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.lat: "method.request.querystring.lat"
          integration.request.querystring.timeout: "method.request.querystring.timeout"
          integration.request.querystring.model: "method.request.querystring.model"
          integration.request.querystring.lng: "method.request.querystring.lng"
          integration.request.querystring.language: "method.request.querystring.language"
          integration.request.querystring.brand: "method.request.querystring.brand"
          integration.request.header.x-guid: "method.request.header.x-guid"
          integration.request.path.provider_type: "method.request.path.provider_type"
        uri: "http://@env: COMMERCE_BEANSTALK_HOST@/v1/repair/options/{provider_type}"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "provider_type"
        in: "path"
        required: true
        type: "string"
      - name: "model"
        in: "query"
        required: true
        type: "string"
      - name: "timeout"
        in: "query"
        required: false
        type: "string"
      - name: "x-guid"
        in: "header"
        required: true
        type: "string"
      - name: "lat"
        in: "query"
        required: true
        type: "string"
      - name: "brand"
        in: "query"
        required: true
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      - name: "lng"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/RepairCenterProjection"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ErrorMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,Authorization,x-api-key,x-request-token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
        
  /effortless/v1/campaigns:
    get:
      summary: Search for campaigns
      produces:
      - "application/json"
      parameters:
      - name: "campaign_type"
        in: "query"
        required: false
        type: "string"
      - name: "serviceType"
        in: "query"
        required: false
        type: "string"
      - name: "conditions"
        in: "query"
        required: false
        type: "string"
      - name: "model"
        in: "query"
        required: true
        type: "string"
      - name: "x-guid"
        in: "header"
        required: true
        type: "string"
      - name: "brand"
        in: "query"
        required: true
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Deal"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ErrorMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          4\d{2}:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,x-request-token,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,x-request-token,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/@lambda:campaign@/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: "aws_proxy"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-guid,x-channel-name,x-request-token,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
        requestTemplates:
          application/json: "{  \"statusCode\" : 200 }"
        passthroughBehavior: "when_no_match"
        type: "mock"

securityDefinitions:
  api_key:
    type: apiKey
    name: x-api-key
    in: header
definitions:
  DealValue:
    type: "object"
    properties:
      id:
        type: "string"
      productImage:
        type: "string"
      campaignType:
        type: "string"
        enum:
        - "UPGRADE_CAMPAIGN"
        - "REPAIR_CAMPAIGN"
      totalTradeIn:
        type: "number"
      buyBack:
        type: "object"
        properties: {}
      parameters:
        type: "object"
        properties: {}
  RepairCenterProjectionItemsItemError:
    type: "object"
    properties:
      rootCause:
        type: "string"
  DefaultresponseforthemethodItem:
    type: "object"
    properties:
      name:
        type: "string"
      type:
        type: "string"
      templates:
        type: "object"
        properties: {}
  RepairCenterProjectionItemsItem:
    type: "object"
    properties:
      distance:
        type: "number"
        description: "Distance in meters"
      name:
        type: "string"
      coordinate:
        type: "object"
        properties: {}
      templates:
        type: "object"
        properties: {}
      error:
        $ref: "#/definitions/RepairCenterProjectionItemsItemError"
  RepairCenterProjection:
    type: "object"
    properties:
      type:
        type: "string"
        enum:
        - "POST_OFFICE"
        - "TELIA_STORE"
        - "SERVICE_CENTER"
      items:
        type: "array"
        items:
          $ref: "#/definitions/RepairCenterProjectionItemsItem"
  Defaultresponseforthemethod:
    type: "array"
    items:
      $ref: "#/definitions/DefaultresponseforthemethodItem"
  Deal:
    type: "object"
    properties:
      value:
        $ref: "#/definitions/DealValue"
  ErrorMessage:
    type: "object"
    properties:
      rootCause:
        type: "string"
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
# basePath: /eBuilder/CommerceServiceMock/1.0.0
# Added by API Auto Mocking Plugin
basePath: /eBuilder/CommerceService/1.0.0